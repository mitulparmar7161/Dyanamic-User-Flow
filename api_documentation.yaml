components:
  schemas:
    Form1:
      properties:
        company_name:
          title: Company Name
          type: string
        dob:
          anyOf:
          - type: string
          - type: 'null'
          title: Dob
        email:
          format: email
          title: Email
          type: string
        f_name:
          title: F Name
          type: string
        hashtag:
          anyOf:
          - type: string
          - type: 'null'
          title: Hashtag
        l_name:
          title: L Name
          type: string
        mobile:
          anyOf:
          - type: string
          - type: 'null'
          title: Mobile
        password:
          title: Password
          type: string
      required:
      - f_name
      - l_name
      - company_name
      - email
      - password
      title: Form1
      type: object
    Form2:
      properties:
        company_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Company Name
        dob:
          anyOf:
          - type: string
          - type: 'null'
          title: Dob
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        f_name:
          title: F Name
          type: string
        hashtag:
          title: Hashtag
          type: string
        l_name:
          title: L Name
          type: string
        mobile:
          title: Mobile
          type: string
        password:
          anyOf:
          - type: string
          - type: 'null'
          title: Password
      required:
      - f_name
      - l_name
      - mobile
      - hashtag
      title: Form2
      type: object
    Form3:
      properties:
        company_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Company Name
        dob:
          title: Dob
          type: string
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        f_name:
          title: F Name
          type: string
        hashtag:
          anyOf:
          - type: string
          - type: 'null'
          title: Hashtag
        l_name:
          title: L Name
          type: string
        mobile:
          title: Mobile
          type: string
        password:
          anyOf:
          - type: string
          - type: 'null'
          title: Password
      required:
      - f_name
      - l_name
      - mobile
      - dob
      title: Form3
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    UpdateUser:
      properties:
        company_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Company Name
        dob:
          anyOf:
          - type: string
          - type: 'null'
          title: Dob
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        f_name:
          anyOf:
          - type: string
          - type: 'null'
          title: F Name
        hashtag:
          anyOf:
          - type: string
          - type: 'null'
          title: Hashtag
        l_name:
          anyOf:
          - type: string
          - type: 'null'
          title: L Name
        mobile:
          anyOf:
          - type: string
          - type: 'null'
          title: Mobile
        password:
          anyOf:
          - type: string
          - type: 'null'
          title: Password
      title: UpdateUser
      type: object
    UserOut:
      properties:
        company_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Company Name
        dob:
          anyOf:
          - type: string
          - type: 'null'
          title: Dob
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        f_name:
          title: F Name
          type: string
        hashtag:
          anyOf:
          - type: string
          - type: 'null'
          title: Hashtag
        id:
          title: Id
          type: string
        l_name:
          title: L Name
          type: string
        mobile:
          anyOf:
          - type: string
          - type: 'null'
          title: Mobile
      required:
      - id
      - f_name
      - l_name
      - mobile
      - company_name
      - email
      - hashtag
      - dob
      title: UserOut
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  description: This is the API documentation for the Dyanamic User Flow API. It provides
    endpoints to create, read, update and delete users.
  title: Dyanamic User Flow API Documentation
  version: 1.0.0
openapi: 3.1.0
paths:
  /add_user:
    post:
      operationId: create_user_add_user_post
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/Form1'
              - $ref: '#/components/schemas/Form2'
              - $ref: '#/components/schemas/Form3'
              title: User
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
  /delete_user/{user_id}:
    delete:
      operationId: delete_user_delete_user__user_id__delete
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete User
  /get_user/{user_id}:
    get:
      operationId: get_user_get_user__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User
  /get_users:
    get:
      operationId: get_users_get_users_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserOut'
                title: Response Get Users Get Users Get
                type: array
          description: Successful Response
      summary: Get Users
  /update_user/{user_id}:
    patch:
      operationId: update_user_update_user__user_id__patch
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update User
